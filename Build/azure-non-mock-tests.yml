variables:
  MONO_VERSION: 6_8_0
  NETCORE_TEST_VERSION: '2.2.x'
  CAKE_SETTINGS_SKIPVERIFICATION: true
  CAKE_SETTINGS_SKIPPACKAGEVERSIONCHECK: true

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

jobs:
  - job: desktop_tests
    displayName: Run Desktop Tests
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
          target: 'unknown-linux-musl'
        mac:
          imageName: 'macos-latest'
          target: 'apple-darwin'
    pool:
      vmImage: $(imageName)
    steps:
    - bash: |
        sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(MONO_VERSION)
        mono --version
      displayName: 'Set mono version'
      condition: and(succeeded(), eq(variables['imageName'], 'macos-latest'))
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk $(NETCORE_TEST_VERSION)'
      inputs:
        version: $(NETCORE_TEST_VERSION)
    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet 5.x'
      inputs:
        versionSpec: 5.x
    - task: NuGetCommand@2
      displayName: 'NuGet restore'
    - bash: |
        bash host_fix.sh
      displayName: 'Fix host issue'
      workingDirectory: Build
      condition: and(succeeded(), in(variables['imageName'], 'macos-latest'))
    - bash: |
        git clone https://github.com/lionel1704/vault-deployer.git
        cd vault-deployer
        wget https://safe-vault.s3.eu-west-2.amazonaws.com/safe_vault-latest-x86_64-$(target).zip
        unzip safe_vault-latest-x86_64-$(target).zip
        chmod +x safe_vault
        chmod +x run-vaults.bash
        ./run-vaults.bash
      workingDirectory: Build
      displayName: 'Download and run section'
    - bash: |
        chmod +x build.sh
        ./build.sh --target=UnZip-Libs
        ./build.sh --target=Run-Desktop-Tests --non-mock=true
      workingDirectory: Build
      displayName: 'Run tests against vaults'
    - task: PublishTestResults@2
      displayName: 'Publish .NET Core Test Results'
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: '**/DesktopTestResult.xml'
        failTaskOnFailedTests: true
        testRunTitle: '.NET Core Tests'
      condition: succeededOrFailed()
    - task: CopyFiles@2
      displayName: 'Copy vault_logs to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**/vault.stdout'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        condition: succeededOrFailed()
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: vault_logs'
      inputs:
        ArtifactName: vault_logs
        condition: succeededOrFailed()
    
